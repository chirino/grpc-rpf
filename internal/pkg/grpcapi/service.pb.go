// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: service.proto

package grpcapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServiceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *ServiceAddress) Reset() {
	*x = ServiceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAddress) ProtoMessage() {}

func (x *ServiceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAddress.ProtoReflect.Descriptor instead.
func (*ServiceAddress) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceAddress) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type ConnectionAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId     int32 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ConnectionId int64 `protobuf:"varint,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
}

func (x *ConnectionAddress) Reset() {
	*x = ConnectionAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionAddress) ProtoMessage() {}

func (x *ConnectionAddress) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionAddress.ProtoReflect.Descriptor instead.
func (*ConnectionAddress) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionAddress) GetServerId() int32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ConnectionAddress) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *Chunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConnectionAddressAndChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ConnectionAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data    []byte             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ConnectionAddressAndChunk) Reset() {
	*x = ConnectionAddressAndChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionAddressAndChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionAddressAndChunk) ProtoMessage() {}

func (x *ConnectionAddressAndChunk) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionAddressAndChunk.ProtoReflect.Descriptor instead.
func (*ConnectionAddressAndChunk) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionAddressAndChunk) GetAddress() *ConnectionAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ConnectionAddressAndChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x1b, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x95, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x48, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x69, 0x6e, 0x6f, 0x2f,
	0x68, 0x73, 0x76, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x3b, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_service_proto_goTypes = []interface{}{
	(*ServiceAddress)(nil),            // 0: proto.ServiceAddress
	(*ConnectionAddress)(nil),         // 1: proto.ConnectionAddress
	(*Chunk)(nil),                     // 2: proto.Chunk
	(*ConnectionAddressAndChunk)(nil), // 3: proto.ConnectionAddressAndChunk
}
var file_service_proto_depIdxs = []int32{
	1, // 0: proto.ConnectionAddressAndChunk.address:type_name -> proto.ConnectionAddress
	0, // 1: proto.RemoteHost.Listen:input_type -> proto.ServiceAddress
	3, // 2: proto.RemoteHost.AcceptConnection:input_type -> proto.ConnectionAddressAndChunk
	1, // 3: proto.RemoteHost.Listen:output_type -> proto.ConnectionAddress
	2, // 4: proto.RemoteHost.AcceptConnection:output_type -> proto.Chunk
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionAddressAndChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteHostClient is the client API for RemoteHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteHostClient interface {
	Listen(ctx context.Context, in *ServiceAddress, opts ...grpc.CallOption) (RemoteHost_ListenClient, error)
	AcceptConnection(ctx context.Context, opts ...grpc.CallOption) (RemoteHost_AcceptConnectionClient, error)
}

type remoteHostClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteHostClient(cc grpc.ClientConnInterface) RemoteHostClient {
	return &remoteHostClient{cc}
}

func (c *remoteHostClient) Listen(ctx context.Context, in *ServiceAddress, opts ...grpc.CallOption) (RemoteHost_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteHost_serviceDesc.Streams[0], "/proto.RemoteHost/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteHostListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteHost_ListenClient interface {
	Recv() (*ConnectionAddress, error)
	grpc.ClientStream
}

type remoteHostListenClient struct {
	grpc.ClientStream
}

func (x *remoteHostListenClient) Recv() (*ConnectionAddress, error) {
	m := new(ConnectionAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteHostClient) AcceptConnection(ctx context.Context, opts ...grpc.CallOption) (RemoteHost_AcceptConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteHost_serviceDesc.Streams[1], "/proto.RemoteHost/AcceptConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteHostAcceptConnectionClient{stream}
	return x, nil
}

type RemoteHost_AcceptConnectionClient interface {
	Send(*ConnectionAddressAndChunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type remoteHostAcceptConnectionClient struct {
	grpc.ClientStream
}

func (x *remoteHostAcceptConnectionClient) Send(m *ConnectionAddressAndChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteHostAcceptConnectionClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteHostServer is the server API for RemoteHost service.
type RemoteHostServer interface {
	Listen(*ServiceAddress, RemoteHost_ListenServer) error
	AcceptConnection(RemoteHost_AcceptConnectionServer) error
}

// UnimplementedRemoteHostServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteHostServer struct {
}

func (*UnimplementedRemoteHostServer) Listen(*ServiceAddress, RemoteHost_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedRemoteHostServer) AcceptConnection(RemoteHost_AcceptConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method AcceptConnection not implemented")
}

func RegisterRemoteHostServer(s *grpc.Server, srv RemoteHostServer) {
	s.RegisterService(&_RemoteHost_serviceDesc, srv)
}

func _RemoteHost_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteHostServer).Listen(m, &remoteHostListenServer{stream})
}

type RemoteHost_ListenServer interface {
	Send(*ConnectionAddress) error
	grpc.ServerStream
}

type remoteHostListenServer struct {
	grpc.ServerStream
}

func (x *remoteHostListenServer) Send(m *ConnectionAddress) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteHost_AcceptConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteHostServer).AcceptConnection(&remoteHostAcceptConnectionServer{stream})
}

type RemoteHost_AcceptConnectionServer interface {
	Send(*Chunk) error
	Recv() (*ConnectionAddressAndChunk, error)
	grpc.ServerStream
}

type remoteHostAcceptConnectionServer struct {
	grpc.ServerStream
}

func (x *remoteHostAcceptConnectionServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteHostAcceptConnectionServer) Recv() (*ConnectionAddressAndChunk, error) {
	m := new(ConnectionAddressAndChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RemoteHost",
	HandlerType: (*RemoteHostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _RemoteHost_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AcceptConnection",
			Handler:       _RemoteHost_AcceptConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
